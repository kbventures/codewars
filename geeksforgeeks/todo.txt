// Road map 
https://neetcode.io/
https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed


// Exercise resources
https://github.com/kbventures/best-leetcode-resources?tab=readme-ov-file
https://geeksforgeeks.com


// Recursion
https://www.geeksforgeeks.org/top-50-interview-problems-on-recursion-algorithm/

// Array
https://www.geeksforgeeks.org/top-50-array-coding-problems-for-interviews/



// Hash Map
https://www.geeksforgeeks.org/top-50-problems-on-hash-data-structure-asked-in-sde-interviews/
DONE https://www.geeksforgeeks.org/find-whether-an-array-is-subset-of-another-array-set-1/
DONE https://www.geeksforgeeks.org/frequency-of-each-character-in-a-string-using-unordered_map-in-c/
DONE https://www.geeksforgeeks.org/given-a-string-find-its-first-non-repeating-character/
DONE https://www.geeksforgeeks.org/find-union-and-intersection-of-two-unsorted-arrays/
DONE https://www.geeksforgeeks.org/find-missing-elements-of-a-range/
DONE https://www.geeksforgeeks.org/check-if-pair-with-given-sum-exists-in-array/
DONE https://www.geeksforgeeks.org/count-distinct-elements-in-an-array/
DONE https://www.geeksforgeeks.org/count-number-of-distinct-substring-in-a-string/
DONE https://www.geeksforgeeks.org/print-unique-words-string/
DONE https://www.geeksforgeeks.org/count-pairs-difference-equal-k/
DONE https://www.geeksforgeeks.org/remove-minimum-number-elements-no-common-element-exist-array/
DONE https://www.geeksforgeeks.org/minimum-insertions-to-form-a-palindrome-with-permutations-allowed/
https://www.geeksforgeeks.org/find-repetitive-element-1-n-1/
https://www.geeksforgeeks.org/remove-duplicates-sorted-array/


https://www.geeksforgeeks.org/remove-duplicates-sorted-array/
// V2 Two Pointers
function removeDuplicates(arr) {
    if (arr.length === 0) return [];

    let index = 0;
    for (let i = 1; i < arr.length; i++) {
        console.log("index",index)
        if (arr[i] !== arr[index]) {
            index++;
            arr[index] = arr[i];
            console.log(index, arr[index], arr[i])
            console.log("arr",arr)
        }
    }

    // Trim the array to remove duplicates
    arr.length = index + 1;
    
    return arr;
}

const result = removeDuplicates([1, 2, 2, 3, 4, 4, 4, 5, 5]);
console.log(result); // Output: [1, 2, 3, 4, 5]

https://www.geeksforgeeks.org/print-unique-words-string/
// Memorize
function cleanString(inputString) {
    // Use a regular expression to match non-alphabetical characters and spaces
    const cleanedString = inputString.replace(/[^a-zA-Z]+/g, '');

    return cleanedString;
}
// function UniqueWords(str){
//     let array = str.split(" ")
//     console.log(array)
//     let cleanArray = array.filter(ele=> cleanString(ele))
//     console.log(cleanArray)
// }

// V1
function UniqueWords(str){
    let array = str.split(" ")
    let HashMap = {}
    for(const i of array){
        let temp = cleanString(i)
        if(!HashMap[temp]){
            HashMap[temp]=1;
        } else {
            HashMap[temp]++
        }
    }
    return Object.keys(HashMap).filter(e=> {return HashMap[e] == 1});
    
}
const result = UniqueWords("Java is great. Grails is also great"); 
console.log("result", result)

https://www.geeksforgeeks.org/count-pairs-difference-equal-k/
var MAX = 100000;
function countPairsWithDiffK(arr, n, k)
{
    var count = 0;  // Initialize count
 
    // Initialize empty hashmap.
    var hashmap = Array(MAX).fill(false);
 
    // Insert array elements to hashmap
    for (var i = 0; i < n; i++)
        hashmap[arr[i]] = true;
 
    for (var i = 0; i < n; i++)
    {
        var x = arr[i];
        if (x - k >= 0 && hashmap[x - k])
            count++;
        if (x + k < MAX && hashmap[x + k])
            count++;
        hashmap[x] = false;
    }
    return count;
}


Add to Banki
Find Disctinc Element Hash Map Version

//https://www.geeksforgeeks.org/count-number-of-distinct-substring-in-a-string/
// V2 HashMap Version
function DistinctSubStr(str){
    let pointer1 = 0
    let pointer2 = str.length
    let result = new Set()

    while(pointer1 < str.length){
        // let temp = str.slice(pointer1, pointer2)
        result.add(str.substring(pointer1,pointer2))
        pointer2--
        if(pointer2 == pointer1){
            pointer1++
            pointer2 = str.length
        }

    }
    return Array.from(result).join(" ")
}

const result = DistinctSubStr("abcd")
console.log(result)

Find first non repeated character optimal version!
function findFirstNonRepChar(str) {
    const charCountMap = {};
    const charOrder = [];

    for (const char of str) {
        charCountMap[char] = (charCountMap[char] || 0) + 1;

        // Keep track of the order of characters encountered
        if (charCountMap[char] === 1) {
            charOrder.push(char);
        } else {
            // Remove from the order if the character is repeating
            const index = charOrder.indexOf(char);
            if (index !== -1) {
                charOrder.splice(index, 1);
            }
        }
    }

    // The first element in charOrder is the first non-repeating character
    return charOrder.length > 0 ? charOrder[0] : null;
}

TwoSum Using HashMap
function TwoSum(arr, sum) {
    const numMap = new Map();

    for (let i = 0; i < arr.length; i++) {
        const complement = sum - arr[i];

        if (numMap.has(complement)) {
            return true; // Found a pair
        }

        numMap.set(arr[i], i); // Store the current element and its index
    }

    return false; // No pair found
}

const result = TwoSum([0, -1, 2, -3, 1], -2);
console.log(result);

const result = findFirstNonRepChar("Geeksforgeeks");
console.log(result);

Find distinct element
function Distinct(arr){
const HashMap = {}
let result = 0;
for(const i of arr){
    // console.log(i)
    if(!HashMap[i]){
        HashMap[i]=1
        result++
    }
}
    return result;
}


const result = Distinct([10, 20, 20, 10, 30, 10, 40])
console.log(result)

********************************************************************************************************
********************************************************************************************************

// Two Pointers
https://www.geeksforgeeks.org/two-pointers-technique/#practice
https://www.geeksforgeeks.org/explore?page=3&category=two-pointer-algorithm&sortBy=submissions&itm_source=geeksforgeeks&itm_medium=article&itm_campaign=bottom_sticky_on_articlehttps://www.geeksforgeeks.org/explore?page=3&category=two-pointer-algorithm&sortBy=submissions&itm_source=geeksforgeeks&itm_medium=article&itm_campaign=bottom_sticky_on_article
https://leetcode.com/discuss/study-guide/1688903/Solved-all-two-pointers-problems-in-100-days
https://medium.com/javarevisited/13-two-pointer-problems-that-can-help-you-land-a-job-5eb2a502aa84

https://leetcode.com/discuss/study-guide/1688903/Solved-all-two-pointers-problems-in-100-days



1. Running from both ends of an array
The first type of problems are, having two pointers at left and right end of array, then moving them to the center while processing something with them.


2 Sum problem
(*) https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/
https://leetcode.com/problems/3sum/
https://leetcode.com/problems/4sum/
https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/
https://leetcode.com/problems/two-sum-iv-input-is-a-bst/
https://leetcode.com/problems/sum-of-square-numbers/
https://leetcode.com/problems/boats-to-save-people/
https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/
https://leetcode.com/problems/3sum-with-multiplicity/

Trapping Water
(*) https://leetcode.com/problems/trapping-rain-water/
https://leetcode.com/problems/container-with-most-water/

Next Permutation
(*) https://leetcode.com/problems/next-permutation/
https://leetcode.com/problems/next-greater-element-iii/
https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/

Reversing / Swapping
DONE https://leetcode.com/problems/valid-palindrome/

DONE (*) https://leetcode.com/problems/reverse-string/

DONE https://leetcode.com/problems/reverse-vowels-of-a-string/

var reverseVowels = function(s) {
    let stringArr = s.split("");
    let start = 0;
    let end = stringArr.length -1;
    let vowels = ['a','e','i','o','u','A','E','I','O','U']
    
    while( start < end){

        if(vowels.includes(stringArr[start]) && vowels.includes(stringArr[end])){
            let temp = stringArr[start];
            stringArr[start]=stringArr[end];
            stringArr[end]= temp;
            start++
            end--
        } else if (!vowels.includes(stringArr[start])){
            start++
        } else if (!vowels.includes(stringArr[end])){
            end--
        }

    }
    return stringArr.join('')
};
DONE https://leetcode.com/problems/valid-palindrome-ii/
https://nileshsaini09.medium.com/valid-palindrome-ii-b3660a1931e5

DONE https://leetcode.com/problems/reverse-only-letters/

BANKI https://leetcode.com/problems/remove-element/ **** ADD TO BANKI
MEDIUM https://leetcode.com/problems/sort-colors/
https://leetcode.com/problems/flipping-an-image/
*** ANKI https://leetcode.com/problems/squares-of-a-sorted-array/ ***
DONE https://leetcode.com/problems/sort-array-by-parity/
ANKI OPTIMAL solution https://leetcode.com/problems/sort-array-by-parity-ii/
MEDIUM https://leetcode.com/problems/pancake-sorting/
DONE Possibly refactor once your master reverse string 3 https://leetcode.com/problems/reverse-prefix-of-word/
https://leetcode.com/problems/reverse-string-ii/ WTF?
DONE BUT YOU NEED TO REDO THE TWO POINTER VERSION https://leetcode.com/problems/reverse-words-in-a-string-iii/

Others
https://leetcode.com/problems/bag-of-tokens/
DONE https://leetcode.com/problems/di-string-match/
https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/
MEDIUM https://leetcode.com/problems/sentence-similarity-iii/
MEDIUM https://leetcode.com/problems/find-k-closest-elements/
ANKI https://leetcode.com/problems/shortest-distance-to-a-character/

**********************************************************************
**********************************************************************

// Stack
https://www.geeksforgeeks.org/top-50-problems-on-stack-data-structure-asked-in-interviews/


// Sliding Window
https://leetcode.com/discuss/study-guide/3630462/Top-20-Sliding-Window-Problems-for-beginners
https://medium.com/leetcode-patterns/leetcode-pattern-2-sliding-windows-for-strings-e19af105316b

// Binary Search
https://www.geeksforgeeks.org/most-asked-binary-search-interview-questions/

// Queue
https://www.geeksforgeeks.org/top-50-problems-on-queue-data-structure-asked-in-sde-interviews/#practice

// Linkedlist

/Trees



Add to anki:
Fibonaci Recursion
Binary Search
Binary Searc Number Of Occurence(array section in geeks for geeks)
Sort012





Top 50 string
ANKI !https://www.geeksforgeeks.org/longest-common-prefix-using-sorting/