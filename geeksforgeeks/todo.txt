// Road map 
https://neetcode.io/


// Exercise resources
https://github.com/kbventures/best-leetcode-resources?tab=readme-ov-file
https://geeksforgeeks.com


// Recursion
https://www.geeksforgeeks.org/top-50-interview-problems-on-recursion-algorithm/

// Array
https://www.geeksforgeeks.org/top-50-array-coding-problems-for-interviews/



// Hash Map
https://www.geeksforgeeks.org/top-50-problems-on-hash-data-structure-asked-in-sde-interviews/
DONE https://www.geeksforgeeks.org/find-whether-an-array-is-subset-of-another-array-set-1/
DONE https://www.geeksforgeeks.org/frequency-of-each-character-in-a-string-using-unordered_map-in-c/
DONE https://www.geeksforgeeks.org/given-a-string-find-its-first-non-repeating-character/
DONE https://www.geeksforgeeks.org/find-union-and-intersection-of-two-unsorted-arrays/
DONE https://www.geeksforgeeks.org/find-missing-elements-of-a-range/
DONE https://www.geeksforgeeks.org/check-if-pair-with-given-sum-exists-in-array/
DONE https://www.geeksforgeeks.org/count-distinct-elements-in-an-array/
DONE https://www.geeksforgeeks.org/count-number-of-distinct-substring-in-a-string/
DONE https://www.geeksforgeeks.org/print-unique-words-string/
DONE https://www.geeksforgeeks.org/count-pairs-difference-equal-k/
https://www.geeksforgeeks.org/remove-minimum-number-elements-no-common-element-exist-array/
https://www.geeksforgeeks.org/minimum-insertions-to-form-a-palindrome-with-permutations-allowed/
https://www.geeksforgeeks.org/find-repetitive-element-1-n-1/
https://www.geeksforgeeks.org/remove-duplicates-sorted-array/





https://www.geeksforgeeks.org/print-unique-words-string/
// Memorize
function cleanString(inputString) {
    // Use a regular expression to match non-alphabetical characters and spaces
    const cleanedString = inputString.replace(/[^a-zA-Z]+/g, '');

    return cleanedString;
}
// function UniqueWords(str){
//     let array = str.split(" ")
//     console.log(array)
//     let cleanArray = array.filter(ele=> cleanString(ele))
//     console.log(cleanArray)
// }

// V1
function UniqueWords(str){
    let array = str.split(" ")
    let HashMap = {}
    for(const i of array){
        let temp = cleanString(i)
        if(!HashMap[temp]){
            HashMap[temp]=1;
        } else {
            HashMap[temp]++
        }
    }
    return Object.keys(HashMap).filter(e=> {return HashMap[e] == 1});
    
}
const result = UniqueWords("Java is great. Grails is also great"); 
console.log("result", result)

https://www.geeksforgeeks.org/count-pairs-difference-equal-k/
var MAX = 100000;
function countPairsWithDiffK(arr, n, k)
{
    var count = 0;  // Initialize count
 
    // Initialize empty hashmap.
    var hashmap = Array(MAX).fill(false);
 
    // Insert array elements to hashmap
    for (var i = 0; i < n; i++)
        hashmap[arr[i]] = true;
 
    for (var i = 0; i < n; i++)
    {
        var x = arr[i];
        if (x - k >= 0 && hashmap[x - k])
            count++;
        if (x + k < MAX && hashmap[x + k])
            count++;
        hashmap[x] = false;
    }
    return count;
}


Add to Banki
Find Disctinc Element Hash Map Version

//https://www.geeksforgeeks.org/count-number-of-distinct-substring-in-a-string/
// V2 HashMap Version
function DistinctSubStr(str){
    let pointer1 = 0
    let pointer2 = str.length
    let result = new Set()

    while(pointer1 < str.length){
        // let temp = str.slice(pointer1, pointer2)
        result.add(str.substring(pointer1,pointer2))
        pointer2--
        if(pointer2 == pointer1){
            pointer1++
            pointer2 = str.length
        }

    }
    return Array.from(result).join(" ")
}

const result = DistinctSubStr("abcd")
console.log(result)

Find first non repeated character optimal version!
function findFirstNonRepChar(str) {
    const charCountMap = {};
    const charOrder = [];

    for (const char of str) {
        charCountMap[char] = (charCountMap[char] || 0) + 1;

        // Keep track of the order of characters encountered
        if (charCountMap[char] === 1) {
            charOrder.push(char);
        } else {
            // Remove from the order if the character is repeating
            const index = charOrder.indexOf(char);
            if (index !== -1) {
                charOrder.splice(index, 1);
            }
        }
    }

    // The first element in charOrder is the first non-repeating character
    return charOrder.length > 0 ? charOrder[0] : null;
}

TwoSum Using HashMap
function TwoSum(arr, sum) {
    const numMap = new Map();

    for (let i = 0; i < arr.length; i++) {
        const complement = sum - arr[i];

        if (numMap.has(complement)) {
            return true; // Found a pair
        }

        numMap.set(arr[i], i); // Store the current element and its index
    }

    return false; // No pair found
}

const result = TwoSum([0, -1, 2, -3, 1], -2);
console.log(result);

const result = findFirstNonRepChar("Geeksforgeeks");
console.log(result);

Find distinct element
function Distinct(arr){
const HashMap = {}
let result = 0;
for(const i of arr){
    // console.log(i)
    if(!HashMap[i]){
        HashMap[i]=1
        result++
    }
}
    return result;
}


const result = Distinct([10, 20, 20, 10, 30, 10, 40])
console.log(result)

// Two Pointers
https://www.geeksforgeeks.org/two-pointers-technique/#practice

// Stack
https://www.geeksforgeeks.org/top-50-problems-on-stack-data-structure-asked-in-interviews/


// Sliding Window
https://leetcode.com/discuss/study-guide/3630462/Top-20-Sliding-Window-Problems-for-beginners

// Binary Search
https://www.geeksforgeeks.org/most-asked-binary-search-interview-questions/

// Queue
https://www.geeksforgeeks.org/top-50-problems-on-queue-data-structure-asked-in-sde-interviews/#practice

// Linkedlist

/Trees



Add to anki:
Fibonaci Recursion
Binary Search
Binary Searc Number Of Occurence(array section in geeks for geeks)
Sort012